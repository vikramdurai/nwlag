/*
	this is the interpreter for
	code generated by the compiler to the
	Nwlag programming language.
*/

package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
)

func Execute(input_file string) error {
	// open input file
	f, err := ioutil.ReadFile(input_file)
	if err != nil {
		return err
	}
	// unmarshal the JSON
	var data []*Mixed
	err = json.Unmarshal(f, &data)
	if err != nil {
		return err
	}
	for _, v := range data {
		var a *Expression
		var b *Statement
		// get absolute value of v
		if v.IsExpression {
			n := v.Abs.(map[string]interface{})
			a = &Expression{
				Name:      n["Name"].(string),
				Arguments: n["Arguments"].([]interface{}),
				Val:       n["Val"].(float64)}
			b = nil
		} else if v.IsStatement {
			n := v.Abs.(map[string]interface{})
			b = &Statement{
				Name:      n["Name"].(string),
				Arguments: n["Arguments"].([]interface{})}
			a = nil
		} else {
			fmt.Fprintln(os.Stderr, "error: data is empty")
		}
		// since the expression is
		// already calculated at compile-time,
		// don't bother evaluating
		if a != nil {
			fmt.Println(a.Val)
		}
		if b != nil {
			// on the other hand, evaluate
			// statements since they're *not*
			// evaluated at compile-time
			switch b.Name {
			case "print":
				for _, n := range b.Arguments {
					fmt.Printf("%v", strings.TrimSuffix(strings.TrimPrefix(n.(string), "\""), "\""))
				}
				fmt.Printf("\n")
			}
		}
	}
	return nil
}
